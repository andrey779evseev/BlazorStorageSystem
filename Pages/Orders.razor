@page "/orders"
@using BlazorStorageSystem.Services
@using BlazorStorageSystem.Components
@using BlazorStorageSystem.Models.Order
@using System.Globalization
@inject IJSRuntime JsRuntime
@inject StorageService StorageService

@if (_visible)
{
    <ModalCreateOrder Close="async () => { _visible = false; await OnInitializedAsync();}"/>
}

@if (_orders == null)
{
    <Loader/>
}
else
{
    <div @onclick="() => { _visible = true; }"
        class="border-2 border-blue-500 bg-blue-300 rounded-xl h-10 mb-2 cursor-pointer hover:bg-blue-400 transition-all text-xl text-white flex justify-center items-center">
        Создать заказ
    </div>
    <table class="rounded-xl bg-blue-300 p-2 w-full text-gray-600">
        <thead>
        <tr>
            <th class="text-left p-2 border-blue-500 border-r-2 @BorderBottom()"></th>
            <th class="text-left p-2 border-blue-500 border-r-2 @BorderBottom()">ФИО</th>
            <th class="text-left p-2 border-blue-500 border-r-2 @BorderBottom()">Дата заказа</th>
            <th class="text-left p-2 border-blue-500 border-r-2 @BorderBottom()">Продавец</th>
            <th class="text-left p-2 border-blue-500 border-r-2 @BorderBottom()">Стоимость</th>
            <th class="text-left p-2 border-blue-500 @BorderBottom()">Товары</th>
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < _orders.Count; i++)
        {
            var order = _orders[i];
            <tr class="relative overflow-hidden">
                <td class="pt-2 text-center border-blue-500 border-r-2 text-red-500 text-2xl h-full @BorderBottom(i)" @onclick="_ => DeleteOrder(order.Id)">
                    <ion-icon name="trash-outline"></ion-icon>
                </td>
                <td class="p-2 border-blue-500 border-r-2 @BorderBottom(i)">@order.Name</td>
                <td class="p-2 border-blue-500 border-r-2 @BorderBottom(i)">@order.Date.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                <td class="p-2 border-blue-500 border-r-2 @BorderBottom(i)">@order.Seller</td>
                <td class="p-2 border-blue-500 border-r-2 @BorderBottom(i)">@order.Price руб.</td>
                <td class="p-2 border-blue-500 @BorderBottom(i)">
                    @for (var j = 0; j < order.Products.Count; j++)
                    {
                        var product = order.Products[j];
                        <div class="flex justify-between items-center">
                            <div class="w-1/6">@(j + 1))</div>
                            <div class="w-3/6">@product.Name</div>
                            <div class="w-2/6">@product.Count кг.</div>
                        </div>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private List<Order>? _orders;
    private bool _visible;

    protected override async Task OnInitializedAsync()
    {
        _orders = await StorageService.GetOrders();
    }

    private string BorderBottom(int i = -1)
    {
        return i != _orders!.Count - 1 && !(_orders.Count == 0 && i == -1) ? "border-b-2" : "";
    }

    private async Task DeleteOrder(string id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");
        if (!confirmed) return;
        await StorageService.DeleteOrder(id);
        var order = _orders!.First(x => x.Id == id);
        foreach (var prod in order.Products)
        {
            var products = await StorageService.GetProducts();
            var product = products.First(x => x.Name == prod.Name);
            product.Sold -= prod.Count;
            product.Count += prod.Count;
            await StorageService.Update(product);
        }
        _orders = null;
        StateHasChanged();
        await OnInitializedAsync();
    }
}