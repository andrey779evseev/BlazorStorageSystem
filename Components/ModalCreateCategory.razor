@using BlazorStorageSystem.Services
@using BlazorStorageSystem.Models.Category
@using System.ComponentModel.DataAnnotations
@namespace BlazorStorageSystem.Components
@inject StorageService StorageService
@inject IJSRuntime JsRuntime


<div class="wrapper fixed top-0 w-full h-screen bg-indigo-900/50 left-0 z-10 flex justify-center items-center" @onclick="_ => Close.InvokeAsync(false)">
    <div class="p-4 flex flex-col w-1/2 bg-blue-300 border-2 border-blue-500 rounded-xl" @onclick:stopPropagation="true">
        <div class="text-2xl text-white mb-2">Создание категории</div>
        <div class="flex flex-col">
            <EditForm Model="_model" class="flex flex-col">
                <label class="flex items-center mb-2">
                    <span class="text-white text-xl mr-2 w-1/3">Наименование категории:</span>
                    <InputText
                        placeholder="Имя"
                        class="w-full border-2 border-blue-500 bg-blue-300 py-2 px-4 text-white rounded-xl placeholder:text-gray-100/50 outline-none"
                        @bind-Value="_model.Name">
                    </InputText>
                </label>
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="flex w-full items-center justify-around">
                    <button
                        class="py-2 px-6 border-2 border-blue-500 bg-blue-300 outline-none rounded-xl text-white hover:bg-blue-500"
                        @onclick="_ => Close.InvokeAsync(false)">
                        Отмена
                    </button>
                    <button
                        class="py-2 px-6 border-2 border-blue-500 bg-blue-300 outline-none rounded-xl text-white hover:bg-blue-500"
                        @onclick="Save" type="submit">
                        Создать
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<bool> Close { get; set; }

    private class FormModel
    {
        [Required(ErrorMessage = "Поле 'имя' обязательное")]
        public string? Name { get; set; }
    }

    private FormModel _model = new();

    private List<Category> _categories;

    protected override async Task OnInitializedAsync()
    {
        _categories = await StorageService.GetCategories();
    }

    private async void Save()
    {
        if (
            _model.Name == null
            ) return;
        if (_categories.Any(x => x.Name == _model.Name))
            await JsRuntime.InvokeVoidAsync("alert", $"Такая категория уже существует: {_model.Name}");
        else
        {
            await StorageService.SaveCategory(new Category(null, _model.Name));
        }
        await Close.InvokeAsync(true);
    }
}