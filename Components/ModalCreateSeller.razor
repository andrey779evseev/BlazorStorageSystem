@using BlazorStorageSystem.Services
@using BlazorStorageSystem.Models.Category
@using System.ComponentModel.DataAnnotations
@using BlazorStorageSystem.Models.Sellers
@namespace BlazorStorageSystem.Components
@inject StorageService StorageService
@inject IJSRuntime JsRuntime


<div class="wrapper fixed top-0 w-full h-screen bg-indigo-900/50 left-0 z-10 flex justify-center items-center" @onclick="_ => Close.InvokeAsync(false)">
    @if (_sellers == null)
    {
        <Loader/>
    }
    else
    {
        <div class="p-4 flex flex-col w-1/2 bg-blue-300 border-2 border-blue-500 rounded-xl" @onclick:stopPropagation="true">
            <div class="text-2xl text-white mb-2">Создание сотрудника</div>
            <div class="flex flex-col">
                <EditForm Model="_model" class="flex flex-col">
                    <label class="flex items-center mb-2">
                        <span class="text-white text-xl mr-2 w-1/3">ФИО:</span>
                        <InputText
                            placeholder="Имя"
                            class="w-full border-2 border-blue-500 bg-blue-300 py-2 px-4 text-white rounded-xl placeholder:text-gray-100/50 outline-none"
                            @bind-Value="_model.Name">
                        </InputText>
                    </label>
                    <label class="flex items-center mb-2">
                        <span class="text-white text-xl mr-2 w-1/3">Адрес:</span>
                        <InputText
                            placeholder="Адрес"
                            class="w-full border-2 border-blue-500 bg-blue-300 py-2 px-4 text-white rounded-xl placeholder:text-gray-100/50 outline-none"
                            @bind-Value="_model.Address">
                        </InputText>
                    </label>
                    <label class="flex items-center mb-2">
                        <span class="text-white text-xl mr-2 w-1/3">Телефон:</span>
                        <InputText
                            placeholder="Телефон"
                            class="w-full border-2 border-blue-500 bg-blue-300 py-2 px-4 text-white rounded-xl placeholder:text-gray-100/50 outline-none"
                            @bind-Value="_model.Phone">
                        </InputText>
                    </label>
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="flex w-full items-center justify-around">
                        <button
                            class="py-2 px-6 border-2 border-blue-500 bg-blue-300 outline-none rounded-xl text-white hover:bg-blue-500"
                            @onclick="_ => Close.InvokeAsync(false)">
                            Отмена
                        </button>
                        <button
                            class="py-2 px-6 border-2 border-blue-500 bg-blue-300 outline-none rounded-xl text-white hover:bg-blue-500"
                            @onclick="Save" type="submit">
                            Создать
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>   
    }
</div>

@code
{
    [Parameter]
    public EventCallback<bool> Close { get; set; }

    private class FormModel
    {
        [Required(ErrorMessage = "Поле 'ФИО' обязательное")]
        public string? Name { get; set; }
        [Required(ErrorMessage = "Поле 'Адрес' обязательное")]
        public string? Address { get; set; }
        [Required(ErrorMessage = "Поле 'Телефон' обязательное")]
        public string? Phone { get; set; }
    }

    private FormModel _model = new();

    private List<Seller>? _sellers;

    protected override async Task OnInitializedAsync()
    {
        _sellers = await StorageService.GetSellers();
    }

    private async void Save()
    {
        if (
            _model.Name == null ||
            _sellers == null ||
            _model.Address == null ||
            _model.Phone == null
            ) return;
        if (_sellers.Any(x => x.Name == _model.Name))
            await JsRuntime.InvokeVoidAsync("alert", $"Такая категория уже существует: {_model.Name}");
        else
        {
            await StorageService.SaveSeller(new Seller(null, _model.Name, _model.Address, _model.Phone));
        }
        await Close.InvokeAsync(true);
    }
}